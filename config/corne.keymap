/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


#define L_BASE 0
#define L_SYMBOL   1
#define L_NAVI   2
#define L_NUMBER  3
#define BSE L_BASE
#define SYM L_SYMBOL
#define NAV L_NAVI
#define NUM L_NUMBER

#define MAC_LANG RC(SPACE)
#define MAC_SCRS LS(LG(N4)) // macOS screenshot
#define MAC_SCRR LS(LG(N5)) // macOS screenrecord
#define WC_SCRS LC(LG(A)) // wechat screenshot

&mt {
    flavor = "hold-preferred";
    tapping-term-ms = <250>;
    quick_tap_ms = <180>;
};

&lt {
    /* flavor = "balanced"; */
    quick_tap_ms = <200>;
    tapping-term-ms = <180>;
};

/ {
        combos {
           compatible = "zmk,combos";
           combo_lpar {
              timeout-ms = <50>;
              key-positions = <25 26>;
              bindings = <&kp LPAR>;
           };

           combo_rpar {
              timeout-ms = <50>;
              key-positions = <33 34>;
              bindings = <&kp RPAR>;
           };
        };

        conditional_layers {
            compatible = "zmk,conditional-layers";
        };

        keymap {
                compatible = "zmk,keymap";

                base_layer {
                        bindings = <
   &none &kp Q      &kp W      &kp E       &kp R        &kp T         &kp Y         &kp U        &kp I        &kp O      &kp P         &none
   &none &kp A      &kp S      &kp D       &kp F        &kp G         &kp H         &kp J        &kp K        &kp L      &lt NUM SEMI  &none
   &none &kp LCTRL  &kp Z      &kp X       &kp C        &kp V         &kp B         &kp N        &kp M        &mo SYM    &kp MAC_LANG  &none
                              &mt LCMD TAB &lt NAV SPACE &kp ENTER   &kp LSHFT  &kp BSPC &kp ESC
                        >;
                };
                symbol_layer {
                        bindings = <
   &none &kp GT   &kp RBRC    &kp RBKT      &kp RPAR    &kp BSLH        &kp MINUS   &kp CARET      &kp TILDE    &none    &kp AT     &none
   &none &kp LT   &kp LBRC    &kp LBKT      &kp LPAR    &kp FSLH        &kp PRCNT   &kp ASTRK      &kp COLON    &none    &kp SEMI   &none
   &none &kp HASH &kp DLLR    &kp QMARK     &kp EXCL    &kp PIPE        &kp PLUS    &kp EQUAL      &kp AMPS     &trans   &kp GRAVE  &none
                              &kp UNDER     &kp DQT     &kp SQT         &kp DOT     &kp COMMA      &kp MINUS
                        >;
                };
                navigation_layer {
                        bindings = <
   &none &kp C_MUTE  &kp AT       &kp HASH     &kp DLLR     &kp C_VOL_UP     &kp C_BRI_UP     &kp PG_UP     &kp UP      &kp PG_DN      &none      &none
   &none &sk LCTRL   &sk LALT     &sk LSHFT    &sk LCMD     &kp C_VOL_DN     &kp C_BRI_DN     &kp LEFT      &kp DOWN    &kp RIGHT      &kp TAB    &none
   &none &kp WC_SCRS &kp MAC_SCRS &kp MAC_SCRR &none        &kp TAB          &none            &kp LA(LEFT)  &kp SPACE   &kp LA(RIGHT)  &kp ENTER  &none
                                  &kp LEFT     &trans       &kp RIGHT        &kp DEL          &kp BSPC      &kp ESC
                        >;
                };
                number_layer {
                        bindings = <
   &none &out OUT_TOG &reset        &none        &none        &kp CARET        &kp MINUS       &kp N7     &kp N8     &kp N9     &kp EQUAL  &none
   &none &bt BT_CLR   &none        &none        &kp ASTRK    &kp FSLH         &kp N0          &kp N4     &kp N5     &kp N6     &trans     &none
   &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4     &kp PLUS        &kp N1     &kp N2     &kp N3     &none      &none
                                   &kp TAB      &kp SPACE    &kp ENTER        &kp DOT       &kp BSPC    &kp COMMA
                        >;
                };
        };
};
