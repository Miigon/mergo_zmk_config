/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


#define L_BASE 0
#define L_SYMBOL   1
#define L_NAVI   2
#define L_NUMBER  3
#define L_EXTRA 4
#define BSE L_BASE
#define SYM L_SYMBOL
#define NAV L_NAVI
#define NUM L_NUMBER
#define EXT L_EXTRA

#define MAC_LANG RC(SPACE)
#define MAC_SCRS LS(LG(N4)) // macOS screenshot
#define MAC_SCRR LS(LG(N5)) // macOS screenrecord
#define WC_SCRS LC(LG(A)) // wechat screenshot

#define SUPMOD LC(LA(LGUI)) // super modifier

&mt {
    flavor = "hold-preferred";
    tapping-term-ms = <250>;
    quick_tap_ms = <180>;
};

&lt {
    flavor = "hold-preferred";
    quick_tap_ms = <180>;
    tapping-term-ms = <250>;
};

/ {
        combos {
           compatible = "zmk,combos";
           combo_lpar {
              timeout-ms = <50>;
              key-positions = <25 26>;
              bindings = <&kp LPAR>;
           };

           combo_rpar {
              timeout-ms = <50>;
              key-positions = <33 34>;
              bindings = <&kp RPAR>;
           };
        };

        behaviors {
            td_cpswd: tap_dance_capsword {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_CAPSWORD";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp LSHFT>, <&caps_word>;
            };
        };

        conditional_layers {
            compatible = "zmk,conditional-layers";
        };

        macros {
                spc_kp: spc_kp {
                label = "ZM_spc_kp";
                compatible = "zmk,behavior-macro-one-param";
                #binding-cells = <1>;
                bindings
                        = <&macro_tap &kp SPACE>
                        , <&macro_param_1to1>
                        , <&macro_tap &kp MACRO_PLACEHOLDER>
                        ;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                base_layer {
                        bindings = <
   &none &kp Q      &kp W      &kp E       &kp R        &kp T         &kp Y         &kp U        &kp I        &kp O      &kp P         &none
   &none &kp A      &kp S      &kp D       &kp F        &kp G         &kp H         &kp J        &kp K        &kp L      &lt NUM SEMI  &none
   &none &kp RCTRL  &kp Z      &kp X       &kp C        &kp V         &kp B         &kp N        &kp M        &mo EXT    &sk SUPMOD    &none
                              &mt RCMD TAB &lt NAV SPACE &kp ENTER   &td_cpswd  &lt SYM BSPC &kp ESC
                        >;
                };
                symbol_layer {
                        bindings = <
   &none &kp HASH &kp DLLR    &kp QMARK     &kp EXCL    &kp BSLH        &kp PRCNT   &kp COMMA      &kp TILDE    &kp CARET    &kp ASTRK     &none
   &none &kp LT   &kp LBRC    &kp LBKT      &kp LPAR    &kp FSLH        &kp MINUS   &kp DOT        &kp COLON    &kp AT    &kp SEMI   &none
   &none &kp GT   &kp RBRC    &kp RBKT      &kp RPAR    &kp PIPE        &kp PLUS    &kp EQUAL      &kp AMPS     &trans   &kp GRAVE  &none
                              &kp UNDER     &kp DQT     &kp SQT         &none       &trans         &kp N0
                        >;
                };
                navigation_layer {
                        bindings = <
   &none &kp C_MUTE  &spc_kp W    &spc_kp E    &spc_kp R    &kp C_VOL_UP     &kp C_BRI_UP     &kp PG_UP     &kp UP      &kp PG_DN      &none      &none
   &none &sk LCTRL   &sk LALT     &sk LSHFT    &sk LCMD     &kp C_VOL_DN     &kp C_BRI_DN     &kp LEFT      &kp DOWN    &kp RIGHT      &kp TAB    &none
   &none &kp WC_SCRS &kp MAC_SCRS &kp MAC_SCRR &none        &kp TAB          &spc_kp B        &kp LA(LEFT)  &kp SPACE   &kp LA(RIGHT)  &sk SUPMOD  &none
                                  &kp LEFT     &trans       &kp RIGHT        &kp DEL          &kp BSPC      &kp ESC
                        >;
                };
                number_layer {
                        bindings = <
   &none &out OUT_TOG &none        &bt BT_CLR   &none        &kp CARET        &kp COMMA       &kp N7     &kp N8     &kp N9     &kp EQUAL  &none
   &none &none        &none        &none        &kp ASTRK    &kp FSLH         &kp MINUS       &kp N4     &kp N5     &kp N6     &trans     &none
   &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4     &kp PLUS        &kp N1     &kp N2     &kp N3     &sk SUPMOD  &none
                                   &kp TAB      &kp SPACE    &kp ENTER        &kp DOT       &kp BSPC    &kp N0
                        >;
                };
                extra_layer {
                        bindings = <
   &none &none        &none        &none        &none        &none            &none           &none       &none     &none     &none     &none
   &none &none        &none        &none        &none        &none            &none           &none       &none     &none     &none     &none
   &none &none        &none        &none        &none        &none            &none           &none       &none     &trans    &none     &none
                                   &none        &none        &none            &none           &none       &none
                        >;
                };
        };
};
